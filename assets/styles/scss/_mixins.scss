// THEME
@mixin theme() {
    .sneakers {
        @content;
    }
}

// CONTAINER WIDTH
@mixin containerWidth($maxWidth: $container-max-width, $paddingX: $container-padding-x, $paddingY: $container-padding-y) {
    max-width: $maxWidth;
    margin: 0 auto;
    padding: $paddingY $paddingX;
}

@mixin fullWidth($fillScreen: false) {
    width: 100%;

    @if $fillScreen == true {
        height: 100%;
    }
}

// BROWSERS CORE
@mixin setBrowsersCore($attr, $value, $cores: $browsers-core-default) {
    #{$attr}: #{$value};

    @each $core in $cores {
        -#{$core}-#{$attr}: #{$value};
    }
}

// BORDER_RADIUS
@mixin borderRadius($radius: $radius-default) {
    @include setBrowsersCore(border-radius, $radius);
}

@mixin rounded() {
    @include borderRadius(50%);
}

// FLEXBOX
@mixin flex($justifyContent: center, $alignItems: center, $flexWrap: wrap) {
    display: flex;
    justify-content: $justifyContent;
    align-items: $alignItems;
    flex-wrap: $flexWrap;
}

@mixin flexBasis($basis, $gap: 0) {
    @if $gap != 0 {
        flex-basis: calc($basis - $gap);
    }

    @else {
        flex-basis: $basis;
    }
}

@mixin flex1($gap: 0) {
    @include flexBasis(100%, $gap);
}

@mixin flex2($gap: 0) {
    @include flexBasis(calc(100% / 2), $gap);
}

@mixin flex3($gap: 0) {
    @include flexBasis(calc(100% / 3), $gap);
}

@mixin flex4($gap: 0) {
    @include flexBasis(calc(100% / 4), $gap);
}

// POSITION
// Relative
@mixin relative() {
    position: relative;
}

// Absolute
@mixin absolute($top: 0, $left: 0) {
    position: absolute;
    top: $top;
    left: $left;
}

@mixin absoluteFull($top: 0, $left: 0, $fillScreen: false) {
    @include absolute($top, $left);
    @include fullWidth($fillScreen);
}

// Fixed
@mixin fixed($top: 0, $left: 0) {
    position: fixed;
    top: $top;
    left: $left;
}

@mixin fixedFull($top: 0, $left: 0, $fillScreen: false) {
    @include fixed($top, $left);
    @include fullWidth($fillScreen);
}

// TRANSITION
@mixin transition($property: $transition-property, $duration: $transition-duration, $timingFunction: $transition-timing-function, $delay: 0s) {
    transition: $property $duration $timingFunction $delay;
}

// RESPONSIVE DESIGN
@mixin setResponsiveDesign($screenWidth) {    
    $width: calc($screenWidth - 1px);

    @media screen and (min-width: $width) {
        @content;
    }
}